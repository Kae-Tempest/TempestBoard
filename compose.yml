services:
  db:
    image: postgres:16-alpine
    command: postgres -c config_file=/etc/postgresql.conf
    shm_size: '4gb'
    ulimits:
      nofile:
        soft: 98304
        hard: 98304
    ports:
      - "6932:5432"
    volumes:
      - ./docker/postgresql/postgresql.conf:/etc/postgresql.conf
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgresql/init.sh:/docker-entrypoint-initdb.d/init.sh
    env_file: './api/.env'
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      timeout: 5s
      retries: 300
    networks:
      - app-network



  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: springboot-dev
    depends_on:
      db:
        condition: service_healthy
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/tempesboard
#      SPRING_DATASOURCE_USERNAME: postgres
#      SPRING_DATASOURCE_PASSWORD: root
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#      SPRING_DEVTOOLS_RESTART_ENABLED: 'true'
#      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: 'true'
    ports:
      - "8080:8080"
      - "35729:35729" # LiveReload port
    volumes:
      - ./api:/app
      - maven-repo:/root/.m2
    networks:
      - app-network



  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: angular-dev
    depends_on:
      - backend
    ports:
      - "4200:4200" # Angular dev server port
      - "49153:49153" # Webpack dev server websocket port
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    networks:
      - app-network

volumes:
  postgres_data:
  maven-repo:
  node_modules:

networks:
  app-network:
    driver: bridge


#networks:
#  docker-monitoring_public:
#    external: true